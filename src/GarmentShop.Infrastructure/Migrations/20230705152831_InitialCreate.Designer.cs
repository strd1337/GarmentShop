// <auto-generated />
using System;
using GarmentShop.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GarmentShop.Infrastructure.Migrations
{
    [DbContext(typeof(GarmentShopDbContext))]
    [Migration("20230705152831_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GarmentShop.Domain.AuthenticationAggregate.Authentication", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RegisteredUsers");
                });

            modelBuilder.Entity("GarmentShop.Domain.BrandAggregate.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("GarmentShop.Domain.Common.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Error")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("GarmentShop.Domain.Common.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessageConsumers");
                });

            modelBuilder.Entity("GarmentShop.Domain.GarmentAggregate.Garment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("GarmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Garments");
                });

            modelBuilder.Entity("GarmentShop.Domain.GarmentCategoryAggregate.GarmentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GarmentCategories");
                });

            modelBuilder.Entity("GarmentShop.Domain.GarmentTypeAggregate.GarmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("GarmentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GarmentTypes");
                });

            modelBuilder.Entity("GarmentShop.Domain.SaleAggregate.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("GarmentShop.Domain.UserAggregate.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("32e1061f-d645-490f-bc44-74315924b781"),
                            CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 269, DateTimeKind.Local).AddTicks(177),
                            ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 269, DateTimeKind.Local).AddTicks(184),
                            Name = "Customer",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("ddcc9ff1-5e42-4f3b-9e36-cc4759b74477"),
                            CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 269, DateTimeKind.Local).AddTicks(188),
                            ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 269, DateTimeKind.Local).AddTicks(189),
                            Name = "Manager",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("190b6d37-d520-4fdb-b94b-5019fb3f9fdd"),
                            CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 269, DateTimeKind.Local).AddTicks(193),
                            ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 269, DateTimeKind.Local).AddTicks(195),
                            Name = "Admin",
                            Type = 2
                        });
                });

            modelBuilder.Entity("GarmentShop.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GarmentShop.Domain.SaleAggregate.Sale", b =>
                {
                    b.OwnsMany("GarmentShop.Domain.SaleAggregate.Entities.Order", "Orders", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("SaleOrderId");

                            b1.Property<Guid>("SaleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ModifiedDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("Id", "SaleId");

                            b1.HasIndex("SaleId");

                            b1.ToTable("SaleOrders", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SaleId");

                            b1.OwnsOne("GarmentShop.Domain.SaleAggregate.ValueObjects.Invoice", "Invoice", b2 =>
                                {
                                    b2.Property<Guid>("OrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("OrderSaleId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("OtherCharges")
                                        .HasPrecision(10, 2)
                                        .HasColumnType("decimal(10,2)")
                                        .HasColumnName("OtherCharges");

                                    b2.Property<decimal>("ShippingAndHandling")
                                        .HasPrecision(10, 2)
                                        .HasColumnType("decimal(10,2)")
                                        .HasColumnName("ShippingAndHandling");

                                    b2.Property<decimal>("Tax")
                                        .HasPrecision(10, 2)
                                        .HasColumnType("decimal(10,2)")
                                        .HasColumnName("Tax");

                                    b2.Property<decimal>("TotalCost")
                                        .HasPrecision(10, 2)
                                        .HasColumnType("decimal(10,2)")
                                        .HasColumnName("TotalCost");

                                    b2.HasKey("OrderId", "OrderSaleId");

                                    b2.ToTable("SaleOrders");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderId", "OrderSaleId");
                                });

                            b1.OwnsOne("GarmentShop.Domain.SaleAggregate.ValueObjects.Payment", "Payment", b2 =>
                                {
                                    b2.Property<Guid>("OrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("OrderSaleId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<decimal>("Amount")
                                        .HasPrecision(10, 2)
                                        .HasColumnType("decimal(10,2)");

                                    b2.Property<DateTime>("Date")
                                        .HasColumnType("datetime2");

                                    b2.Property<string>("Method")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)")
                                        .HasColumnName("Method");

                                    b2.HasKey("OrderId", "OrderSaleId");

                                    b2.ToTable("SaleOrders");

                                    b2.WithOwner()
                                        .HasForeignKey("OrderId", "OrderSaleId");
                                });

                            b1.OwnsMany("GarmentShop.Domain.SaleAggregate.Entities.OrderItem", "Items", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("OrderItemId");

                                    b2.Property<Guid>("SaleOrderId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("SaleId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTime>("CreatedDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<Guid>("GarmentId")
                                        .HasColumnType("uniqueidentifier")
                                        .HasColumnName("GarmentId");

                                    b2.Property<DateTime>("ModifiedDate")
                                        .HasColumnType("datetime2");

                                    b2.Property<int>("Quantity")
                                        .HasColumnType("int")
                                        .HasColumnName("Quantity");

                                    b2.Property<decimal>("UnitPrice")
                                        .HasPrecision(10, 2)
                                        .HasColumnType("decimal(10,2)")
                                        .HasColumnName("UnitPrice");

                                    b2.HasKey("Id", "SaleOrderId", "SaleId");

                                    b2.HasIndex("SaleOrderId", "SaleId");

                                    b2.ToTable("OrderItems", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("SaleOrderId", "SaleId");
                                });

                            b1.Navigation("Invoice")
                                .IsRequired();

                            b1.Navigation("Items");

                            b1.Navigation("Payment")
                                .IsRequired();
                        });

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GarmentShop.Domain.UserAggregate.Entities.Role", b =>
                {
                    b.OwnsMany("GarmentShop.Domain.UserAggregate.Entities.Permission", "Permissions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("PermissionId");

                            b1.Property<Guid>("RoleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ModifiedDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Name");

                            b1.Property<int>("Type")
                                .HasMaxLength(50)
                                .HasColumnType("int")
                                .HasColumnName("Type");

                            b1.HasKey("Id", "RoleId");

                            b1.HasIndex("RoleId");

                            b1.ToTable("RolePermissions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RoleId");

                            b1.HasData(
                                new
                                {
                                    Id = new Guid("ba20263f-5ab4-4f5c-b079-738e9873ca60"),
                                    RoleId = new Guid("32e1061f-d645-490f-bc44-74315924b781"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9636),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9692),
                                    Name = "AddToCart",
                                    Type = 0
                                },
                                new
                                {
                                    Id = new Guid("3c3e0d7a-d68b-46ae-8d05-754744c64d7b"),
                                    RoleId = new Guid("32e1061f-d645-490f-bc44-74315924b781"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9699),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9701),
                                    Name = "PlaceOrder",
                                    Type = 1
                                },
                                new
                                {
                                    Id = new Guid("e0eeeb28-e09a-43d2-8ce8-07f4af6877e2"),
                                    RoleId = new Guid("32e1061f-d645-490f-bc44-74315924b781"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9705),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9707),
                                    Name = "ViewOrderHistory",
                                    Type = 2
                                },
                                new
                                {
                                    Id = new Guid("11dfa449-ace9-4dc0-b44a-9f406ecdb4a8"),
                                    RoleId = new Guid("32e1061f-d645-490f-bc44-74315924b781"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9724),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9726),
                                    Name = "UpdateShippingAddress",
                                    Type = 3
                                },
                                new
                                {
                                    Id = new Guid("8b3340ec-435b-4bb1-a27c-7979a858b3f4"),
                                    RoleId = new Guid("ddcc9ff1-5e42-4f3b-9e36-cc4759b74477"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9731),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9733),
                                    Name = "EditItems",
                                    Type = 4
                                },
                                new
                                {
                                    Id = new Guid("f0298703-e812-4cd1-866e-79272131bab7"),
                                    RoleId = new Guid("ddcc9ff1-5e42-4f3b-9e36-cc4759b74477"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9738),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9739),
                                    Name = "DeleteItems",
                                    Type = 5
                                },
                                new
                                {
                                    Id = new Guid("46ee5ad0-37ce-4830-9ec9-0e7044ce49c5"),
                                    RoleId = new Guid("ddcc9ff1-5e42-4f3b-9e36-cc4759b74477"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9744),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9746),
                                    Name = "AddItems",
                                    Type = 6
                                },
                                new
                                {
                                    Id = new Guid("239c787d-0019-48b6-8a80-2471aa41fc77"),
                                    RoleId = new Guid("190b6d37-d520-4fdb-b94b-5019fb3f9fdd"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9750),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9752),
                                    Name = "ManageCustomers",
                                    Type = 7
                                },
                                new
                                {
                                    Id = new Guid("c5306f2a-c5d6-43f2-9529-5fbf04f60bcf"),
                                    RoleId = new Guid("190b6d37-d520-4fdb-b94b-5019fb3f9fdd"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9756),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9758),
                                    Name = "ManageUsers",
                                    Type = 8
                                },
                                new
                                {
                                    Id = new Guid("6adcd048-e86b-450a-80ea-190b724474d2"),
                                    RoleId = new Guid("190b6d37-d520-4fdb-b94b-5019fb3f9fdd"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9763),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9765),
                                    Name = "ManageRoles",
                                    Type = 9
                                },
                                new
                                {
                                    Id = new Guid("38f5f2bd-32ca-4abe-8cdd-0b6d92483605"),
                                    RoleId = new Guid("190b6d37-d520-4fdb-b94b-5019fb3f9fdd"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9769),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9771),
                                    Name = "ManagePermissions",
                                    Type = 10
                                },
                                new
                                {
                                    Id = new Guid("6fe33040-d046-4819-bee9-26556f1ef64b"),
                                    RoleId = new Guid("190b6d37-d520-4fdb-b94b-5019fb3f9fdd"),
                                    CreatedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9779),
                                    ModifiedDate = new DateTime(2023, 7, 5, 18, 28, 31, 268, DateTimeKind.Local).AddTicks(9781),
                                    Name = "ManageOrders",
                                    Type = 11
                                });
                        });

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("GarmentShop.Domain.UserAggregate.User", b =>
                {
                    b.OwnsMany("GarmentShop.Domain.SaleAggregate.ValueObjects.SaleId", "SaleIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("SaleId");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserSaleIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("GarmentShop.Domain.UserAggregate.Entities.UserRole", "Roles", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("UserRoleId");

                            b1.Property<Guid>("RoleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ModifiedDate")
                                .HasColumnType("datetime2");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id", "RoleId");

                            b1.HasIndex("RoleId");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserRoles", (string)null);

                            b1.HasOne("GarmentShop.Domain.UserAggregate.Entities.Role", "Role")
                                .WithMany()
                                .HasForeignKey("RoleId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.Navigation("Role");
                        });

                    b.OwnsOne("GarmentShop.Domain.UserAggregate.ValueObjects.UserDetailInformation", "Information", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Address");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Country");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LastName");

                            b1.Property<string>("PhoneNumber")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("PhoneNumber");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Information")
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("SaleIds");
                });
#pragma warning restore 612, 618
        }
    }
}
